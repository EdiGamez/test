import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.GsonBuilder;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.junit.MockitoJUnitRunner;

import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.Instant;
import java.util.*;

@RunWith(MockitoJUnitRunner.class)
public class UpdInfMomServiceTest {

    @InjectMocks
    private UpdInfMomService service; // Asume que esta es la clase que contiene updMomInf

    @Mock private CacheProcessRepo cacheProcessRepo;
    @Mock private CacheBatchInMemoryService cacheBatchInMemoryService;
    @Mock private RestSigomConsumerService rcs;
    @Mock private MomMonitorService monitor;
    @Mock private LoggerService log;

    @Captor
    private ArgumentCaptor<String> stringCaptor;

    private NewMsgMomUpdInfoRequest request;
    private HeaderCtrl headerCtrl;
    private MomResult momResult;

    @Before
    public void setup() {
        headerCtrl = new HeaderCtrl();
        headerCtrl.setIdFunctionality("FUNC_01");
        headerCtrl.setCurrent(1);
        headerCtrl.setTotal(1);

        momResult = new MomResult();
        momResult.setAssetClass("Equity");
        momResult.setFactorType("Risk");
        momResult.setFlag("Y");

        request = new NewMsgMomUpdInfoRequest();
        request.setHeaderCtrl(headerCtrl);
        request.setOperation("CREATE");
        request.setMomResult(momResult);

        when(cacheBatchInMemoryService.getBatches()).thenReturn(new HashMap<>());
    }

    @Test
    public void test_updMomInf_batchFullyProcessed_returnsTrue() throws Exception {
        Map<String, Integer> batchMap = new HashMap<>();
        batchMap.put("FUNC_01", 0);
        when(cacheBatchInMemoryService.getBatches()).thenReturn(batchMap);

        List<String> messages = Collections.singletonList(
                new GsonBuilder().serializeNulls().create().toJson(request)
        );
        when(cacheProcessRepo.readMsgFromCache(anyString(), anyString(), anyString(), anyString()))
                .thenReturn(messages);

        boolean result = service.updMomInf(request);

        assertTrue(result);
        verify(rcs, times(1)).updMomInf(any(MomResult.class));
        verify(monitor, times(1)).notifyModelabilityRequestSended(any());
    }

    @Test
    public void test_updMomInf_batchNotFullyProcessed_returnsFalse() throws Exception {
        headerCtrl.setTotal(2); // current = 1, total = 2, no se completa el batch
        Map<String, Integer> batchMap = new HashMap<>();
        batchMap.put("FUNC_01", 1); // Simula un contador en 1
        when(cacheBatchInMemoryService.getBatches()).thenReturn(batchMap);

        boolean result = service.updMomInf(request);

        assertFalse(result);
        verify(cacheProcessRepo, never()).readMsgFromCache(anyString(), anyString(), anyString(), anyString());
        verify(rcs, never()).updMomInf(any());
    }

    @Test
    public void test_updMomInf_throwsException_returnsFalse() throws Exception {
        doThrow(new RuntimeException("Simulated failure")).when(cacheProcessRepo)
                .callInsertMessageIntoCache(any(), any(), any(), any(), any(), anyInt(), anyInt(), any());

        boolean result = service.updMomInf(request);

        assertFalse(result);
        verify(log, times(1)).logException(any());
    }

    @Test
    public void test_determineFlag_returnsCorrectValues() {
        NewMsgMomUpdInfoRequest req = new NewMsgMomUpdInfoRequest();
        MomResult result = new MomResult();
        req.setMomResult(result);

        result.setFlag("Y");
        assertEquals("1", service.determineFlag(req));

        result.setFlag("N");
        assertEquals("0", service.determineFlag(req));

        result.setFlag("Z");
        assertNull(service.determineFlag(req));
    }

    @Test
    public void test_processRequestAndCache_returnsCorrectId() throws Exception {
        String expectedId = "FUNC_01";

        String idFunction = service.processRequestAndCache(request);

        assertEquals(expectedId, idFunction);
        verify(cacheProcessRepo, times(1)).callInsertMessageIntoCache(
                eq("FUNC_01"),
                eq("Equity"),
                eq("Risk"),
                eq("CREATE"),
                anyString(),
                eq(1),
                eq(1),
                any()
        );
    }

    @Test
    public void test_updateBatchCount_incrementsProperly() {
        Map<String, Integer> batchMap = new HashMap<>();
        batchMap.put("FUNC_01", 2);
        when(cacheBatchInMemoryService.getBatches()).thenReturn(batchMap);

        int result = service.updateBatchCount("FUNC_01");
        assertEquals(3, result);
    }

    @Test
    public void test_processAllMessages_executesSuccessfully() throws Exception {
        List<String> messages = new ArrayList<>();
        ObjectMapper mapper = new ObjectMapper();
        messages.add(mapper.writeValueAsString(request));

        when(cacheProcessRepo.readMsgFromCache(any(), any(), any(), any()))
                .thenReturn(messages);

        service.processAllMessages(request, "FUNC_01", mapper);

        verify(rcs, times(1)).updMomInf(any());
        verify(monitor, times(1)).notifyModelabilityRequestSended(any());
    }

    @Test
    public void test_processMessage_executesSuccessfully() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        String msg = new GsonBuilder().serializeNulls().create().toJson(request);

        service.processMessage(msg, "FUNC_01", mapper);

        verify(rcs).updMomInf(any(MomResult.class));
        verify(monitor).notifyModelabilityRequestSended(any(MomResult.class));
    }
}
