public class JobConfigExtractTaylorReportDbTest {

    private JobConfigExtractTaylorReportDb config;
    private JobBuilderFactory jobBuilderFactory;
    private StepBuilderFactory stepBuilderFactory;
    private TaskletTaylorReportLoadDatabase tasklet;

    @BeforeEach
    void setUp() {
        config = new JobConfigExtractTaylorReportDb();
        jobBuilderFactory = mock(JobBuilderFactory.class, RETURNS_DEEP_STUBS);
        stepBuilderFactory = mock(StepBuilderFactory.class, RETURNS_DEEP_STUBS);
        tasklet = mock(TaskletTaylorReportLoadDatabase.class);

        // Inyectar valores simulados a las propiedades @Value
        config.getClass().getDeclaredFields();
        setPrivateField("dataDatePart", "20240410");
        setPrivateField("unit", "UNIT1");
        setPrivateField("path", "/some/path");
    }

    private void setPrivateField(String name, String value) {
        try {
            var field = JobConfigExtractTaylorReportDb.class.getDeclaredField(name);
            field.setAccessible(true);
            field.set(config, value);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    void testJobCreation() {
        Job job = config.jobExtracFullRevalReportDb(jobBuilderFactory, tasklet, stepBuilderFactory);
        assertNotNull(job);
        assertEquals("jobExtracTaylorReportDb", job.getName());
    }

    @Test
    void testStepCreation() {
        Step step = config.stepFrLoadDb(tasklet, stepBuilderFactory);
        assertNotNull(step);
        assertEquals("stepFrLoadDb", step.getName());
    }

    @Test
    void testJobListener() {
        JobExecution jobExecution = mock(JobExecution.class);
        JobInstance jobInstance = mock(JobInstance.class);
        when(jobExecution.getJobInstance()).thenReturn(jobInstance);
        when(jobInstance.getJobName()).thenReturn("jobTest");

        JobConfigExtractTaylorReportDb.JobListener listener = config.new JobListener();

        listener.beforeJob(jobExecution);
        listener.afterJob(jobExecution);
    }

    @Test
    void testStepListener() {
        StepExecution stepExecution = mock(StepExecution.class);
        when(stepExecution.getStepName()).thenReturn("stepTest");

        JobConfigExtractTaylorReportDb.StepGenerarListener listener = config.new StepGenerarListener();

        listener.beforeStep(stepExecution);
        ExitStatus status = listener.afterStep(stepExecution);

        // Aunque el método retorna null, lo validamos para cobertura
        assertNull(status);
    }
}

import com.isb.rfrbatch.jobextracfullrevalreport.jobextractfullrevalreportdb.config.JobConfigExtractTaylorReportDb;
import com.isb.rfrbatch.jobextracfullrevalreport.jobextractfullrevalreportdb.tasklets.TaskletTaylorReportLoadDatabase;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.springframework.batch.core.*;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;

import java.lang.reflect.Field;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class JobConfigExtractTaylorReportDbTest {

    private JobConfigExtractTaylorReportDb config;
    private JobBuilderFactory jobBuilderFactory;
    private StepBuilderFactory stepBuilderFactory;
    private TaskletTaylorReportLoadDatabase tasklet;

    @Before
    public void setUp() throws Exception {
        config = new JobConfigExtractTaylorReportDb();
        jobBuilderFactory = mock(JobBuilderFactory.class, RETURNS_DEEP_STUBS);
        stepBuilderFactory = mock(StepBuilderFactory.class, RETURNS_DEEP_STUBS);
        tasklet = mock(TaskletTaylorReportLoadDatabase.class);

        // Inyectar valores @Value simulados
        setPrivateField("dataDatePart", "20240410");
        setPrivateField("unit", "UNIT1");
        setPrivateField("path", "/some/path");
    }

    private void setPrivateField(String name, String value) throws Exception {
        Field field = JobConfigExtractTaylorReportDb.class.getDeclaredField(name);
        field.setAccessible(true);
        field.set(config, value);
    }

    @Test
    public void testJobCreation() {
        Job job = config.jobExtracFullRevalReportDb(jobBuilderFactory, tasklet, stepBuilderFactory);
        assertNotNull(job);
        assertEquals("jobExtracTaylorReportDb", job.getName());
    }

    @Test
    public void testStepCreation() {
        Step step = config.stepFrLoadDb(tasklet, stepBuilderFactory);
        assertNotNull(step);
        assertEquals("stepFrLoadDb", step.getName());
    }

    @Test
    public void testJobListenerExecution() {
        JobExecution jobExecution = mock(JobExecution.class);
        JobInstance jobInstance = mock(JobInstance.class);
        when(jobExecution.getJobInstance()).thenReturn(jobInstance);
        when(jobInstance.getJobName()).thenReturn("jobTest");

        JobConfigExtractTaylorReportDb.JobListener listener = config.new JobListener();

        listener.beforeJob(jobExecution);
        listener.afterJob(jobExecution);
    }

    @Test
    public void testStepListenerExecution() {
        StepExecution stepExecution = mock(StepExecution.class);
        when(stepExecution.getStepName()).thenReturn("stepTest");

        JobConfigExtractTaylorReportDb.StepGenerarListener listener = config.new StepGenerarListener();

        listener.beforeStep(stepExecution);
        ExitStatus status = listener.afterStep(stepExecution);

        assertNull(status); // Confirmamos que devuelve null, como está definido
    }
}
