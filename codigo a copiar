import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.configuration.JobBuilderFactory;
import org.springframework.batch.core.configuration.StepBuilderFactory;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.launch.JobRepository;
import org.springframework.batch.core.launch.JobOperator;
import org.springframework.batch.core.step.Step;
import org.springframework.batch.test.MetaDataInstanceFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.test.context.junit4.SpringRunner;

import static org.mockito.Mockito.*;

@RunWith(SpringRunner.class)
public class JobConfigExtractTaylorReportDbTest {

    @Mock
    private JobBuilderFactory jobBuilderFactory;
    
    @Mock
    private StepBuilderFactory stepBuilderFactory;
    
    @Mock
    private TaskletTaylorReportLoadDatabase taskletTaylorReportLoadDatabase;

    @Mock
    private JobRepository jobRepository;

    @Mock
    private JobLauncher jobLauncher;

    @Mock
    private JobOperator jobOperator;

    @InjectMocks
    private JobConfigExtractTaylorReportDb jobConfigExtractTaylorReportDb;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testJobExtracFullRevalReportDb() {
        // Setup
        when(jobBuilderFactory.get(anyString())).thenReturn(mock(Job.Builder.class));
        when(stepBuilderFactory.get(anyString())).thenReturn(mock(Step.Builder.class));
        
        // Ejecutar el método
        Job job = jobConfigExtractTaylorReportDb.jobExtracFullRevalReportDb(
                jobBuilderFactory, taskletTaylorReportLoadDatabase, stepBuilderFactory
        );
        
        // Verificar que se crearon correctamente los beans
        assertNotNull(job);
        verify(jobBuilderFactory).get("jobExtracTaylorReportDb");
        verify(stepBuilderFactory).get("stepFrLoadDb");
        
        // Verificar que el job y el step tienen los listeners correctos
        assertEquals(1, job.getJobListeners().size());
    }

    @Test
    public void testStepFrLoadDb() {
        // Setup
        when(stepBuilderFactory.get(anyString())).thenReturn(mock(Step.Builder.class));
        
        // Ejecutar el método
        Step step = jobConfigExtractTaylorReportDb.stepFrLoadDb(taskletTaylorReportLoadDatabase, stepBuilderFactory);
        
        // Verificar que se ha creado correctamente el step
        assertNotNull(step);
        verify(stepBuilderFactory).get("stepFrLoadDb");
    }

    @Test
    public void testJobListenerBeforeAndAfterJob() {
        // Crear un mock de JobExecution
        JobExecution jobExecution = MetaDataInstanceFactory.createJobExecution();
        JobListener jobListener = jobConfigExtractTaylorReportDb.new JobListener();
        
        // Probar el comportamiento de beforeJob y afterJob
        jobListener.beforeJob(jobExecution);
        jobListener.afterJob(jobExecution);
        
        // Verificar que las funciones fueron llamadas sin errores
        assertNotNull(jobListener);
    }

    @Test
    public void testStepListenerBeforeAndAfterStep() {
        // Crear un mock de StepExecution
        StepExecution stepExecution = MetaDataInstanceFactory.createStepExecution();
        StepGenerarListener stepListener = jobConfigExtractTaylorReportDb.new StepGenerarListener();
        
        // Probar el comportamiento de beforeStep y afterStep
        stepListener.beforeStep(stepExecution);
        stepListener.afterStep(stepExecution);
        
        // Verificar que las funciones fueron llamadas sin errores
        assertNotNull(stepListener);
    }
}
