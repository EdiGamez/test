import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import static org.junit.Assert.*;

public class CsvBeanTaylorReportTest {

    @Test
    public void testSetterAndGetter() {
        // Crear una nueva instancia de la clase
        CsvBeanTaylorReport report = new CsvBeanTaylorReport();

        // Asignar valores usando los setters
        report.setAssetClass("Equity");
        report.setFactorType("Risk");
        report.setSubtype("Subtype1");
        report.setName("SampleName");
        report.setOwnerUnit("Unit1");
        report.setStatus("Active");
        report.setUnit("Unit1");
        report.setAdoUnderlying("Underlying1");
        report.setReturnModel("Model1");
        report.setTemplate("Template1");
        report.setNroDays("30");
        report.setLabel("Label1");
        report.setSwapMaturity("2025-01-01");
        report.setOptionMaturity("2025-12-31");
        report.setSkew("0.5");

        // Verificar que los valores se asignen correctamente usando los getters
        assertEquals("Equity", report.getAssetClass());
        assertEquals("Risk", report.getFactorType());
        assertEquals("Subtype1", report.getSubtype());
        assertEquals("SampleName", report.getName());
        assertEquals("Unit1", report.getOwnerUnit());
        assertEquals("Active", report.getStatus());
        assertEquals("Unit1", report.getUnit());
        assertEquals("Underlying1", report.getAdoUnderlying());
        assertEquals("Model1", report.getReturnModel());
        assertEquals("Template1", report.getTemplate());
        assertEquals("30", report.getNroDays());
        assertEquals("Label1", report.getLabel());
        assertEquals("2025-01-01", report.getSwapMaturity());
        assertEquals("2025-12-31", report.getOptionMaturity());
        assertEquals("0.5", report.getSkew());
    }

    @Test
    public void testJsonSerialization() throws Exception {
        // Crear una nueva instancia de la clase y asignar valores
        CsvBeanTaylorReport report = new CsvBeanTaylorReport();
        report.setAssetClass("Equity");
        report.setFactorType("Risk");
        report.setSubtype("Subtype1");

        // Serializar el objeto a JSON
        ObjectMapper objectMapper = new ObjectMapper();
        String json = objectMapper.writeValueAsString(report);

        // Verificar que la serializaci√≥n contenga los valores esperados
        assertTrue(json.contains("\"Asset Class\":\"Equity\""));
        assertTrue(json.contains("\"Factor Type\":\"Risk\""));
        assertTrue(json.contains("\"Subtype\":\"Subtype1\""));
    }

    @Test
    public void testJsonDeserialization() throws Exception {
        // JSON de prueba
        String json = "{\"Asset Class\":\"Equity\",\"Factor Type\":\"Risk\",\"Subtype\":\"Subtype1\"}";

        // Deserializar el JSON a un objeto CsvBeanTaylorReport
        ObjectMapper objectMapper = new ObjectMapper();
        CsvBeanTaylorReport report = objectMapper.readValue(json, CsvBeanTaylorReport.class);

        // Verificar que los valores del objeto coincidan con los del JSON
        assertEquals("Equity", report.getAssetClass());
        assertEquals("Risk", report.getFactorType());
        assertEquals("Subtype1", report.getSubtype());
    }
}
