import static org.mockito.Mockito.*;

import org.junit.Before;
import org.junit.Test;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import java.sql.Date;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class ControlObsmodServiceTest {

    private ControlObsmodService service;
    private EntityManager entityManager;
    private Query mockQuery;

    @Before
    public void setup() {
        entityManager = mock(EntityManager.class);
        mockQuery = mock(Query.class);

        service = new ControlObsmodService();
        service.entityManager = entityManager; // inyectar manualmente si no hay DI

        when(entityManager.createNativeQuery(anyString())).thenReturn(mockQuery);
        when(mockQuery.setParameter(anyString(), any())).thenReturn(mockQuery);
    }

    @Test
    public void testUpdateControlObsmodFlowCancelation_success() {
        service.updateControlObsmodFlowCancelation("2025-05-08", "ENGINE_X", "ASSET_A", "TYPE_1");

        verify(entityManager).createNativeQuery(anyString());
        verify(mockQuery, times(1)).executeUpdate();
    }

    @Test
    public void testUpdateControlObsmodFlow_success() {
        service.updateControlObsmodFlow("2025-05-08", "FLOW_X", "ASSET_B", "TYPE_2", 
            "FUNC_MOM", "Y", "Y", "N", "N", "FUNC_PROXY");

        verify(entityManager).createNativeQuery(anyString());
        verify(mockQuery, times(1)).executeUpdate();
    }

    @Test
    public void testInsertIntoControlObsmodFlow_success() {
        service.insertIntoControlObsmodFlow("2025-05-08", "FLOW_Y", "ASSET_C", "TYPE_3", 
            "FUNC_MOM", "Y", "Y", "Y", "Y", "FUNC_PROXY");

        verify(entityManager).createNativeQuery(anyString());
        verify(mockQuery, times(1)).executeUpdate();
    }
}
