package com.sgt.rfr.rfrmomservice.database.repository;

import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.sql.Date;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class ProcessMonitorRepositoryTest {

    @Mock
    private EntityManager entityManager;

    @Mock
    private RfrMonitorObservabilidadFlowService rfrMonitorObservabilidadFlowService;

    @Mock
    private UtilSerializer utilSerializer;

    @InjectMocks
    private ProcessMonitorRepository processMonitorRepository;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testInsertIntoControlObsmodFlow() {
        String dataDatePart = "2023-05-09";
        String flow = "testFlow";
        String assetClass = "testAssetClass";
        String factorType = "testFactorType";
        String idFunctionalityMom = "testIdFunctionalityMom";
        String momApply = "testMomApply";
        String momApplyEnded = "testMomApplyEnded";
        String proxyApply = "testProxyApply";
        String proxyApplyEnded = "testProxyApplyEnded";
        String idFunctionalityProxy = "testIdFunctionalityProxy";

        Query query = mock(Query.class);
        when(entityManager.createNativeQuery(anyString())).thenReturn(query);

        processMonitorRepository.insertIntoControlObsmodFlow(dataDatePart, flow, assetClass, factorType, idFunctionalityMom, momApply, momApplyEnded, proxyApply, proxyApplyEnded, idFunctionalityProxy);

        verify(query).setParameter(eq("dataDatePart"), eq(Date.valueOf(LocalDate.parse(dataDatePart, DateTimeFormatter.ofPattern("yyyy-MM-dd")))));
        verify(query).setParameter(eq("flow"), eq(flow));
        verify(query).setParameter(eq("assetClass"), eq(assetClass));
        verify(query).setParameter(eq("factorType"), eq(factorType));
        verify(query).setParameter(eq("idFunctionalityMom"), eq(idFunctionalityMom));
        verify(query).setParameter(eq("momApply"), eq(momApply));
        verify(query).setParameter(eq("momApplyEnded"), eq(momApplyEnded));
        verify(query).setParameter(eq("proxyApply"), eq(proxyApply));
        verify(query).setParameter(eq("proxyApplyEnded"), eq(proxyApplyEnded));
        verify(query).setParameter(eq("idFunctionalityProxy"), eq(idFunctionalityProxy));
        verify(query).setParameter(eq("canceled"), eq('N'));
        verify(query).setParameter(eq("batchCompleted"), eq('N'));
        verify(query).setParameter(eq("momStartBatch"), any(Timestamp.class));
        verify(query).executeUpdate();
    }

    @Test
    public void testUpdateControlObsmodFlow() {
        String dataDatePart = "2023-05-09";
        String flow = "testFlow";
        String assetClass = "testAssetClass";
        String factorType = "testFactorType";
        String idFunctionalityMom = "testIdFunctionalityMom";
        String momApply = "testMomApply";
        String momApplyEnded = "testMomApplyEnded";
        String proxyApply = "testProxyApply";
        String proxyApplyEnded = "testProxyApplyEnded";
        String idFunctionalityProxy = "testIdFunctionalityProxy";

        Query query = mock(Query.class);
        when(entityManager.createNativeQuery(anyString())).thenReturn(query);

        processMonitorRepository.updateControlObsmodFlow(dataDatePart, flow, assetClass, factorType, idFunctionalityMom, momApply, momApplyEnded, proxyApply, proxyApplyEnded, idFunctionalityProxy);

        verify(query).setParameter(eq("dataDatePart"), eq(Date.valueOf(LocalDate.parse(dataDatePart, DateTimeFormatter.ofPattern("yyyy-MM-dd")))));
        verify(query).setParameter(eq("flow"), eq(flow));
        verify(query).setParameter(eq("assetClass"), eq(assetClass));
        verify(query).setParameter(eq("factorType"), eq(factorType));
        verify(query).setParameter(eq("idFunctionalityMom"), eq(idFunctionalityMom));
        verify(query).setParameter(eq("momApply"), eq(momApply));
        verify(query).setParameter(eq("momApplyEnded"), eq(momApplyEnded));
        verify(query).setParameter(eq("proxyApply"), eq(proxyApply));
        verify(query).setParameter(eq("proxyApplyEnded"), eq(proxyApplyEnded));
        verify(query).setParameter(eq("idFunctionalityProxy"), eq(idFunctionalityProxy));
        verify(query).setParameter(eq("batchCompleted"), eq('N'));
        verify(query).setParameter(eq("momEndBatch"), any(Timestamp.class));
        verify(query).executeUpdate();
    }

    @Test
    public void testUpdateControlObsmodFlowCancelation() {
        String flagDate = "2023-05-09";
        String engine = "testEngine";
        String assetClass = "testAssetClass";
        String factorType = "testFactorType";

        Query query = mock(Query.class);
        when(entityManager.createNativeQuery(anyString())).thenReturn(query);

        processMonitorRepository.updateControlObsmodFlowCancelation(flagDate, engine, assetClass, factorType);

        verify(query).setParameter(eq("dataDatePart"), eq(Date.valueOf(LocalDate.parse(flagDate, DateTimeFormatter.ofPattern("yyyy-MM-dd")))));
        verify(query).setParameter(eq("flow"), eq(engine.toLowerCase()));
        verify(query).setParameter(eq("assetClass"), eq(assetClass));
        verify(query).setParameter(eq("factorType"), eq(factorType));
        verify(query).setParameter(eq("canceled"), eq("Y"));
        verify(query).setParameter(eq("batchCompleted"), eq("Y"));
        verify(query).executeUpdate();
    }
}
