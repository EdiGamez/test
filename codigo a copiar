package com.sgt.rfr.rfrinventorylib.services.inventory.operation.inventory.scm.taylor.curves.infcrv;

import com.sgt.rfr.rfrinventorylib.database.procedures.model.api.points.GetUnderlyingPointRequest;
import com.sgt.rfr.rfrinventorylib.database.procedures.model.api.points.GetUnderlyingPointResponse;
import com.sgt.rfr.rfrinventorylib.database.procedures.model.api.proxies.GetSigomProxyRequest;
import com.sgt.rfr.rfrinventorylib.database.procedures.model.api.proxies.GetSigomProxyResponse;
import com.sgt.rfr.rfrinventorylib.database.procedures.model.api.underlying.GetUnderlyingsRequest;
import com.sgt.rfr.rfrinventorylib.database.procedures.model.api.underlying.GetUnderlyingsResponse;
import com.sgt.rfr.rfrinventorylib.database.procedures.model.db.FactorDb;
import com.sgt.rfr.rfrinventorylib.database.procedures.model.db.points.SigomNativePoint;
import com.sgt.rfr.rfrinventorylib.database.procedures.model.db.proxies.SigomProxies;
import com.sgt.rfr.rfrinventorylib.database.procedures.model.db.underlying.UnderlyingDbResponse;
import com.sgt.rfr.rfrinventorylib.database.rfr.pkgtaylorservicesrfr2.repository.RfrPkgTaylorServicesRfr2Repository;
import com.sgt.rfr.rfrinventorylib.services.auxiliar.builder.InventoryFactory;
import com.sgt.rfr.rfrinventorylib.services.auxiliar.builder.RestRequestFactory;
import com.sgt.rfr.rfrinventorylib.services.auxiliar.kafka.messages.jsonrequest.InventoryRequest;
import com.sgt.rfr.rfrinventorylib.services.auxiliar.kafka.messages.jsonresponse.Factor;
import com.sgt.rfr.rfrinventorylib.util.predicates.UtilPredicates;
import com.sgt.rfr.rfrinventorylib.util.scheduler.SchedulerInventory;
import com.sgt.rfr.rfrinventorylib.util.serializer.UtilSerializerInventory;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

@Service
@Slf4j
public class InfCrvTaylorScmInventoryService  {

    @Autowired
    private SchedulerInventory schedulerInventory;

    @Autowired
    private RfrPkgTaylorServicesRfr2Repository rcs;

    @Autowired
    private ParserTaylorInfCrvService jsonParser;

    @Autowired
    private UtilSerializerInventory utilSerializer;

    @Autowired
    private UtilPredicates utilPredicates;

    @Autowired
    private InventoryFactory inventoryFactory;

    @Autowired
    private RestRequestFactory restRequestFactory;

    public List<Factor> getInventory(InventoryRequest inventoryRequest) {
        List<UnderlyingDbResponse> underlyingList = getUnderlyingsFromDb(inventoryRequest);
        Integer totalSizeInventary = underlyingList.size();
        AtomicInteger current = new AtomicInteger(0);
        return underlyingList.stream()
                .map(underlyingDb -> buildFactorDb(underlyingDb, inventoryRequest))
                .filter(
                        (utilPredicates.hasReturnModel(inventoryRequest))
                                .and(utilPredicates.isNativePointsFullFilled(inventoryRequest)
                                        .or(utilPredicates.isTemplatePointsFullFilled(inventoryRequest))))
                .sorted(Comparator.comparing(f -> f.getUnderlyingDbResponse().getName()))
                .collect(Collectors.toList())
                .stream()
                .map(factorDb -> jsonParser.buildJsonFactor(inventoryRequest, totalSizeInventary, current.incrementAndGet(), factorDb))
                .collect(Collectors.toList());
    }
    private FactorDb buildFactorDb(UnderlyingDbResponse underlyingDb, InventoryRequest inventoryRequest) {
        List<SigomNativePoint> nativePoints = getListPoints(underlyingDb, inventoryRequest);
        List<SigomProxies> returnAndParProxies = getListParProxies(underlyingDb, inventoryRequest);
        return new FactorDb(underlyingDb, null, nativePoints, returnAndParProxies, null, null);
    }
    private List<UnderlyingDbResponse> getUnderlyingsFromDb(InventoryRequest inventoryRequest) {
        GetUnderlyingsRequest underlyingsRequest = restRequestFactory.buildGetUnderlyingsRequest(inventoryRequest);
        GetUnderlyingsResponse underlyings = rcs.callTaylorGetUnderlyingsInfCrv(underlyingsRequest);
        return inventoryFactory.getUnderlyingsFromDb(underlyings);
    }

    private List<SigomNativePoint> getListPoints(UnderlyingDbResponse underDb, InventoryRequest inventoryRequest) {
        GetUnderlyingPointRequest pointRequest = restRequestFactory.buildGetUnderlyingPointRequest(inventoryRequest, underDb);
        GetUnderlyingPointResponse pointList = rcs.callTaylorGetUnderlyingPoint_InfCrv(pointRequest);
        List<SigomNativePoint> sigomNativePoints = inventoryFactory.getNativeListPoints(underDb, pointList);
        return sigomNativePoints.stream()
                .filter(sp -> sp.getPoint().getAdo() != null)
                .filter(utilPredicates.distinctByKey(sp -> Arrays.asList(sp.getPoint().getTenor(), sp.getPoint().getNrdays(), sp.getPoint().getAdo())))
                .collect(Collectors.toList());
    }
    private List<SigomProxies> getListParProxies(UnderlyingDbResponse underDb, InventoryRequest inventoryRequest) {
        GetSigomProxyRequest proxReq = restRequestFactory.buildGetSigomProxyRequest(inventoryRequest, underDb);
        GetSigomProxyResponse proxResp = rcs.callTaylorGetReturnProxy_InfCrv(proxReq);
        return inventoryFactory.getListReturnProxies(proxResp);
    }
}
