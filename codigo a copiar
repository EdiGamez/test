protected List<Factor> processInventory(String type, String assetClass, String factorType, String unit, String dataDatePart, InventoryService inventoryService, InventoryService fullRevalService, List<TrfrInventoriesDTO> inventoriesAvailables) {
        InventoryRequest inventoryRequest = new InventoryRequest(type, INVENTORY, "SCM", TAYLOR, assetClass, factorType, unit, dataDatePart, "N/A");
        List<Factor> factorList = new ArrayList<>();
        if (fullRevalService == null) {
            factorList = inventoryService.getInventory(inventoryRequest);
        } else {
             TrfrInventoriesDTO inventory = filterInventories(inventoriesAvailables, inventoryRequest);
            if (inventory != null && "YES".equalsIgnoreCase(inventory.getIsCopyFr())) {
                log.info("Redireccionando a full reval service para el tipo de inventario: " +  inventoryRequest.getType() + "  " + inventoryRequest.getAssetClass() + " " + inventoryRequest.getFactorType() + " " + inventoryRequest.getUnit() + " " + inventoryRequest.getCalcDate());
                factorList = fullRevalService.getInventory(inventoryRequest);

                List<String> underlyingNames = trfrRedirectService.getUnderlyingNames(unit, TAYLOR, assetClass, factorType, dataDatePart);
                factorList = factorList.stream()
                        .filter(factor -> underlyingNames.contains(factor.getRfInfo().getUnderlyingName()))
                        .collect(Collectors.toList());

                for (int i = 0; i < factorList.size(); i++) {
                    Factor factor = factorList.get(i);
                    factor.getHeaderCtrl().setCurrent(i + 1);
                    factor.getHeaderCtrl().setTotal(factorList.size());
                }
            } else {
                factorList = inventoryService.getInventory(inventoryRequest);
            }
        }
        return factorList;
    }

  public Optional<TrfrInventoriesDTO> findMatchingInventory(InventoryRequest inventoryRequest) {
        List<TrfrInventoriesDTO> trfrInventoriesList = getTrfrInventoriesList();

        // Filtra por unidad
        Optional<TrfrInventoriesDTO> matchingInventory = trfrInventoriesList.stream()
                .filter(utilPredicates.isRequestInventoryValid(inventoryRequest))
                .filter(dto -> inventoryRequest.getUnit().equalsIgnoreCase(dto.getUnit()))
                .findFirst();

//        // Si no encuentra coincidencia, busca el registro con unidad null
        if (!matchingInventory.isPresent()) {
            matchingInventory = trfrInventoriesList.stream()
                    .filter(isRequestInventoryValid(inventoryRequest))
                    .filter(dto -> dto.getUnit() == null)
                    .findFirst();
        }
        return matchingInventory;
    }
