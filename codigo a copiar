import com.isb.rfrbatch.jobextracfullrevalreport.jobextractfullrevalreportdb.services.database.beans.RFRLoadFullRevalObj;
import org.junit.Before;
import org.junit.Test;

import java.sql.Date;
import java.sql.SQLInput;
import java.sql.SQLOutput;
import java.sql.SQLException;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class RFRLoadFullRevalObjTest {

    private RFRLoadFullRevalObj obj;

    @Before
    public void setUp() {
        obj = new RFRLoadFullRevalObj();
    }

    @Test
    public void testGetAndSetters() {
        Date date = new Date(System.currentTimeMillis());
        obj.setDataDatePart(date);
        assertEquals(date, obj.getDataDatePart());

        obj.setAsset("asset");
        assertEquals("asset", obj.getAsset());

        obj.setFactor("factor");
        assertEquals("factor", obj.getFactor());

        obj.setSubtype("subtype");
        assertEquals("subtype", obj.getSubtype());

        obj.setName("name");
        assertEquals("name", obj.getName());

        obj.setOwner("owner");
        assertEquals("owner", obj.getOwner());

        obj.setStatus("status");
        assertEquals("status", obj.getStatus());

        obj.setUnit("unit");
        assertEquals("unit", obj.getUnit());

        obj.setUado("uado");
        assertEquals("uado", obj.getUado());

        obj.setRetmodel("retmodel");
        assertEquals("retmodel", obj.getRetmodel());

        obj.setTemplate("template");
        assertEquals("template", obj.getTemplate());

        obj.setNrdays("10");
        assertEquals("10", obj.getNrdays());

        obj.setTenor("5Y");
        assertEquals("5Y", obj.getTenor());

        obj.setSwptenor("2Y");
        assertEquals("2Y", obj.getSwptenor());

        obj.setOpttenor("1M");
        assertEquals("1M", obj.getOpttenor());

        obj.setStrike("1.5");
        assertEquals("1.5", obj.getStrike());

        obj.setInterpolform("linear");
        assertEquals("linear", obj.getInterpolform());

        obj.setValueinterpol("true");
        assertEquals("true", obj.getValueinterpol());

        obj.setInterpolfpillar("2025-01-01");
        assertEquals("2025-01-01", obj.getInterpolfpillar());

        obj.setInterpollpillar("2026-01-01");
        assertEquals("2026-01-01", obj.getInterpollpillar());

        obj.setCalmethod("daycount");
        assertEquals("daycount", obj.getCalmethod());

        obj.setRateconv("rateconv");
        assertEquals("rateconv", obj.getRateconv());
    }

    @Test
    public void testSQLTypeName() {
        assertEquals("RFR.RFR_LOADFULLREVAL_OBJ", obj.getSQLTypeName());
    }

    @Test
    public void testReadSQL() throws SQLException {
        SQLInput mockInput = mock(SQLInput.class);

        when(mockInput.readDate()).thenReturn(new Date(123456789L));
        for (int i = 0; i < 45; i++) {
            when(mockInput.readString()).thenReturn("string");
        }
        when(mockInput.readDouble()).thenReturn(1.0);

        obj.readSQL(mockInput, RFRLoadFullRevalObj.SQL_TYPE);

        verify(mockInput, times(1)).readDate();
        verify(mockInput, times(45)).readString();
        verify(mockInput, times(4)).readDouble();
    }

    @Test
    public void testWriteSQL() throws SQLException {
        SQLOutput mockOutput = mock(SQLOutput.class);

        obj.setDataDatePart(new Date(123456789L));
        obj.setAsset("A");
        obj.setFactor("F");
        obj.setSubtype("S");
        obj.setName("N");
        obj.setOwner("O");
        obj.setStatus("ST");
        obj.setUnit("U");
        obj.setUado("UA");
        obj.setRetmodel("RM");
        obj.setTemplate("T");
        obj.setNrdays("ND");
        obj.setTenor("TE");
        obj.setSwptenor("ST");
        obj.setOpttenor("OT");
        obj.setStrike("STR");
        obj.setInterpolform("IF");
        obj.setValueinterpol("VI");
        obj.setInterpolfpillar("IPF");
        obj.setInterpollpillar("IPL");
        obj.setCalmethod("CM");
        obj.setRateconv("RC");
        obj.setSpreadcrvty("SC");
        obj.setBusinessdays("BD");
        obj.setPmethodology("PM");
        obj.setPstatus("PS");
        obj.setPado("PA");
        obj.setPstartd("PST");
        obj.setPendd("PEN");
        obj.setPalpha("AL");
        obj.setPbeta("BE");
        obj.setPproxy1("PX1");
        obj.setPnrdays1("NR1");
        obj.setPlabel1("PL1");
        obj.setPmaturity1("PM1");
        obj.setPsmaturity1("PS1");
        obj.setPomaturity1("PO1");
        obj.setPskew1("SK1");
        obj.setPproxy2("PX2");
        obj.setPnrdays2("NR2");
        obj.setPlabel2("PL2");
        obj.setPmaturity2("PM2");
        obj.setPsmaturity2("PS2");
        obj.setPomaturity2("PO2");
        obj.setPskew2("SK2");
        obj.setDiff(1.0);
        obj.setUnderlcrv("UC");
        obj.setPk(2.0);
        obj.setFkParent(3.0);
        obj.setFkExtension(4.0);
        obj.setFkOwnerObj(5.0);

        obj.writeSQL(mockOutput);

        verify(mockOutput, times(1)).writeDate(any(Date.class));
        verify(mockOutput, times(45)).writeString(anyString());
        verify(mockOutput, times(4)).writeDouble(anyDouble());
    }

    @Test
    public void testToObjectArray() {
        obj.setAsset("AssetTest");
        obj.setDiff(3.14);
        Object[] array = obj.toObjectArray();
        assertNotNull(array);
        assertEquals(50, array.length); // 1 date + 45 strings + 4 doubles
    }
}
