package com.sgt.rfr.rfrmomservice.database.repository;

import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.sql.Date;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class ProcessMonitorRepositoryTest {

    @Mock
    private EntityManager entityManager;

    @Mock
    private RfrMonitorObservabilidadFlowService rfrMonitorObservabilidadFlowService;

    @Mock
    private UtilSerializer utilSerializer;

    @InjectMocks
    private ProcessMonitorRepository processMonitorRepository;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testInsertIntoControlObsmodFlow() {
        String dataDatePart = "2023-05-09";
        String flow = "testFlow";
        String assetClass = "testAssetClass";
        String factorType = "testFactorType";
        String idFunctionalityMom = "testIdFunctionalityMom";
        String momApply = "testMomApply";
        String momApplyEnded = "testMomApplyEnded";
        String proxyApply = "testProxyApply";
        String proxyApplyEnded = "testProxyApplyEnded";
        String idFunctionalityProxy = "testIdFunctionalityProxy";

        Query query = mock(Query.class);
        when(entityManager.createNativeQuery(anyString())).thenReturn(query);

        processMonitorRepository.insertIntoControlObsmodFlow(dataDatePart, flow, assetClass, factorType, idFunctionalityMom, momApply, momApplyEnded, proxyApply, proxyApplyEnded, idFunctionalityProxy);

        verify(query).setParameter("dataDatePart", Date.valueOf(LocalDate.parse(dataDatePart, DateTimeFormatter.ofPattern("yyyy-MM-dd"))));
        verify(query).setParameter("flow", flow);
        verify(query).setParameter("assetClass", assetClass);
        verify(query).setParameter("factorType", factorType);
        verify(query).setParameter("idFunctionalityMom", idFunctionalityMom);
        verify(query).setParameter("momApply", momApply);
        verify(query).setParameter("momApplyEnded", momApplyEnded);
        verify(query).setParameter("proxyApply", proxyApply);
        verify(query).setParameter("proxyApplyEnded", proxyApplyEnded);
        verify(query).setParameter("idFunctionalityProxy", idFunctionalityProxy);
        verify(query).setParameter("canceled", 'N');
        verify(query).setParameter("batchCompleted", 'N');
        verify(query).setParameter("momStartBatch", Timestamp.from(Instant.now()));
        verify(query).executeUpdate();
    }

    @Test
    public void testUpdateControlObsmodFlow() {
        String dataDatePart = "2023-05-09";
        String flow = "testFlow";
        String assetClass = "testAssetClass";
        String factorType = "testFactorType";
        String idFunctionalityMom = "testIdFunctionalityMom";
        String momApply = "testMomApply";
        String momApplyEnded = "testMomApplyEnded";
        String proxyApply = "testProxyApply";
        String proxyApplyEnded = "testProxyApplyEnded";
        String idFunctionalityProxy = "testIdFunctionalityProxy";

        Query query = mock(Query.class);
        when(entityManager.createNativeQuery(anyString())).thenReturn(query);

        processMonitorRepository.updateControlObsmodFlow(dataDatePart, flow, assetClass, factorType, idFunctionalityMom, momApply, momApplyEnded, proxyApply, proxyApplyEnded, idFunctionalityProxy);

        verify(query).setParameter("dataDatePart", Date.valueOf(LocalDate.parse(dataDatePart, DateTimeFormatter.ofPattern("yyyy-MM-dd"))));
        verify(query).setParameter("flow", flow);
        verify(query).setParameter("assetClass", assetClass);
        verify(query).setParameter("factorType", factorType);
        verify(query).setParameter("idFunctionalityMom", idFunctionalityMom);
        verify(query).setParameter("momApply", momApply);
        verify(query).setParameter("momApplyEnded", momApplyEnded);
        verify(query).setParameter("proxyApply", proxyApply);
        verify(query).setParameter("proxyApplyEnded", proxyApplyEnded);
        verify(query).setParameter("idFunctionalityProxy", idFunctionalityProxy);
        verify(query).setParameter("batchCompleted", 'N');
        verify(query).setParameter("momEndBatch", Timestamp.from(Instant.now()));
        verify(query).executeUpdate();
    }

    @Test
    public void testUpdateControlObsmodFlowCancelation() {
        String flagDate = "2023-05-09";
        String engine = "testEngine";
        String assetClass = "testAssetClass";
        String factorType = "testFactorType";

        Query query = mock(Query.class);
        when(entityManager.createNativeQuery(anyString())).thenReturn(query);

        processMonitorRepository.updateControlObsmodFlowCancelation(flagDate, engine, assetClass, factorType);

        verify(query).setParameter("dataDatePart", Date.valueOf(LocalDate.parse(flagDate, DateTimeFormatter.ofPattern("yyyy-MM-dd"))));
        verify(query).setParameter("flow", engine.toLowerCase());
        verify(query).setParameter("assetClass", assetClass);
        verify(query).setParameter("factorType", factorType);
        verify(query).setParameter("canceled", "Y");
        verify(query).setParameter("batchCompleted", "Y");
        verify(query).executeUpdate();
    }
}
