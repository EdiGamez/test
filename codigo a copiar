import com.yourpackage.JobConfigExtractTaylorReportDb;
import com.yourpackage.tasklets.TaskletTaylorReportLoadDatabase;
import lombok.extern.slf4j.Slf4j;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobInstance;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.StepExecution;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;

import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@Slf4j
public class JobConfigExtractTaylorReportDbTest {

    @Mock
    private JobBuilderFactory jobBuilderFactory;
    @Mock
    private StepBuilderFactory stepBuilderFactory;
    @Mock
    private TaskletTaylorReportLoadDatabase tasklet;

    private JobConfigExtractTaylorReportDb config;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        config = new JobConfigExtractTaylorReportDb();
    }

    @Test
    public void testStepFrLoadDbNotNull() {
        Step step = config.stepFrLoadDb(tasklet, stepBuilderFactory);
        assertNotNull("Step debe estar correctamente configurado", step);
    }

    @Test
    public void testJobExtracFullRevalReportDbNotNull() {
        Job job = config.jobExtracFullRevalReportDb(jobBuilderFactory, tasklet, stepBuilderFactory);
        assertNotNull("Job debe estar correctamente creado", job);
    }

    @Test
    public void testJobListener() {
        JobConfigExtractTaylorReportDb.JobListener listener = config.new JobListener();

        JobExecution jobExecution = mock(JobExecution.class);
        JobInstance jobInstance = mock(JobInstance.class);
        when(jobExecution.getJobInstance()).thenReturn(jobInstance);
        when(jobInstance.getJobName()).thenReturn("jobTest");

        config.dataDatePart = "2025-04-10";
        config.unit = "Unit-Test";

        listener.beforeJob(jobExecution);
        sleep(1);  // Simula duración del trabajo
        listener.afterJob(jobExecution);

        // No hay excepciones y logs se imprimen: test pasa
    }

    @Test
    public void testStepGenerarListener() {
        JobConfigExtractTaylorReportDb.StepGenerarListener listener = config.new StepGenerarListener();

        StepExecution stepExecution = mock(StepExecution.class);
        when(stepExecution.getStepName()).thenReturn("stepTest");

        config.dataDatePart = "2025-04-10";
        config.unit = "Unit-Test";

        listener.beforeStep(stepExecution);
        sleep(1);  // Simula duración del step
        ExitStatus status = listener.afterStep(stepExecution);

        assertNull("Debe devolver null (comportamiento esperado en la clase original)", status);
    }

    private void sleep(int seconds) {
        try {
            Thread.sleep(seconds * 1000L);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}
