 public NewMsgGenericResponse getAdoUnderlying(NewMsgGenericRequest request) throws RfrException {
        List<Output> outputListResult = request.getOutputs();
        int errorFlag = 0;
        String errorMessage = null;
        try {
            log.logInfo(RfrCommonCTES.Messages.MESSAGE_START + " getParamList -> NewMsgGenericRequest: " + request.toString());
            Scheduler.lockStatics();
            initStaticTables(log,rcs);
            if (processListAdosDatapoints(request, outputListResult)) {
                return buildResponse(request, outputListResult, errorFlag, errorMessage);
            }
            if (processAdoDatapoint(request, outputListResult)) {
                return buildResponse(request, outputListResult, errorFlag, errorMessage);
            }
            if (processAdoUnderlying(request, outputListResult)) {
                return buildResponse(request, outputListResult, errorFlag, errorMessage);
            }
            log.logError("No podemos identificar la operación para la petición: " + request);
            errorFlag = 1;
            errorMessage = RfrCommonCTES.Messages.INFO_NO_DATA_AVAILABLE;
        } catch (Exception e) {
            errorFlag = 1;
            errorMessage = RfrCommonCTES.Messages.INFO_NO_DATA_AVAILABLE;
        } finally {
            Scheduler.unlockStatics();
        }
        return buildResponse(request, outputListResult, errorFlag, errorMessage);
    }
    private boolean processListAdosDatapoints(NewMsgGenericRequest request, List<Output> outputListResult) {
        if (checkIfIsLookingListAdosDatapoints(request)) {
            List<GetUnderlyingWithAdoResponse> responseList = executeGetUnderlyingWithAdoPointProcedure(request);
            if (responseList != null && !responseList.isEmpty()) {
                outputListResult.addAll(responseList.stream()
                        .map(response -> buildOutputAdo("ado", response.getPlAdo(), response.getTenorCode(), null))
                        .collect(Collectors.toList()));
            } else {
                log.logWarning(RfrCommonCTES.Messages.INFO_NO_DATA_AVAILABLE);
            }
            return true;
        }
        return false;
    }
    private boolean processAdoDatapoint(NewMsgGenericRequest request, List<Output> outputListResult) {
        if (!"FX_VOL".equalsIgnoreCase(request.getAssetClass() + "_" + request.getFactorType())
                && checkIfIsLookingTheAdoOfDatapoint(request)) {
            String ado = executeGetAdoDatapointFunction(request);
            if (ado != null) {
                outputListResult.add(buildOutputAdo("ado", ado, null, null));
            } else {
                log.logWarning(RfrCommonCTES.Messages.INFO_NO_DATA_AVAILABLE);
            }
            return true;
        }
        return false;
    }
    private boolean processAdoUnderlying(NewMsgGenericRequest request, List<Output> outputListResult) {
        if (("FX_VOL".equalsIgnoreCase(request.getAssetClass() + "_" + request.getFactorType())
                && checkIfIsLookingTheAdoOfDatapoint(request)) || checkIfIsLookingAdoUnderlying(request)) {
            String ado = executeGetAdoUnderlyingFunction(request);
            if (ado != null) {
                outputListResult.add(buildOutputAdo("ado", ado, null, null));
            } else {
                log.logWarning(RfrCommonCTES.Messages.INFO_NO_DATA_AVAILABLE);
            }
            return true;
        }
        return false;
    }
    private NewMsgGenericResponse buildResponse(NewMsgGenericRequest request, List<Output> outputListResult, int errorFlag, String errorMessage) {
        NewMsgGenericResponse response = new NewMsgGenericResponse();
        response.setIdFunctionality(request.getIdFunctionality());
        response.setUnit(request.getUnit());
        response.setAssetClass(request.getAssetClass());
        response.setFactorType(request.getFactorType());
        response.setInputs(request.getInputs());
        response.setOutputs(outputListResult);
        response.setOperation(request.getOperation());
        response.setSourceSystem(request.getSourceSystem());
        response.setResponseQueue(request.getResponseQueue());
        response.setErrorFlag(errorFlag);
        response.setErrorMessage(errorMessage);
        log.logInfo("Mensaje a enviar: " + utilMomSerializer.objectToJson(response));
        return response;
    }
