import com.isb.rfrbatch.jobextracfullrevalreport.jobextractfullrevalreportdb.config.JobConfigExtractTaylorReportDb;
import com.isb.rfrbatch.jobextracfullrevalreport.jobextractfullrevalreportdb.tasklets.TaskletTaylorReportLoadDatabase;
import org.junit.Before;
import org.junit.Test;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.repository.support.SimpleJobRepository;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.transaction.support.ResTransactionManager;

import static org.junit.Assert.*;

public class JobConfigExtractTaylorReportDbTest {

    private JobConfigExtractTaylorReportDb config;
    private TaskletTaylorReportLoadDatabase tasklet;

    @Before
    public void setUp() throws Exception {
        config = new JobConfigExtractTaylorReportDb();
        tasklet = (contribution, chunkContext) -> RepeatStatus.FINISHED;

        // Simular valores de propiedades
        setPrivateField("dataDatePart", "20240410");
        setPrivateField("unit", "UNIT1");
        setPrivateField("path", "/dummy/path");
    }

    private void setPrivateField(String name, String value) throws Exception {
        java.lang.reflect.Field field = JobConfigExtractTaylorReportDb.class.getDeclaredField(name);
        field.setAccessible(true);
        field.set(config, value);
    }

    @Test
    public void testJobCreation() {
        // Crear factories reales de Spring Batch
        JobBuilderFactory jobBuilderFactory = new JobBuilderFactory(new SimpleJobRepository(), null);
        StepBuilderFactory stepBuilderFactory = new StepBuilderFactory(new SimpleJobRepository(), null);

        Job job = config.jobExtracFullRevalReportDb(jobBuilderFactory, tasklet, stepBuilderFactory);

        assertNotNull(job);
        assertEquals("jobExtracTaylorReportDb", job.getName());
    }

    @Test
    public void testStepCreation() {
        StepBuilderFactory stepBuilderFactory = new StepBuilderFactory(new SimpleJobRepository(), null);

        Step step = config.stepFrLoadDb(tasklet, stepBuilderFactory);

        assertNotNull(step);
        assertEquals("stepFrLoadDb", step.getName());
    }
}
