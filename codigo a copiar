    public void updateControlObsmodFlowCancelation(String flagDate, String engine, String assetClass, String factorType) {
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            LocalDate localDate = LocalDate.parse(flagDate, formatter);
            java.sql.Date sqlDate = java.sql.Date.valueOf(localDate);
            Query query = entityManager.createNativeQuery(updateQueryCancelation);
            query.setParameter(DATA_DATE_PART, sqlDate);
            query.setParameter(FLOW, engine.toLowerCase());
            query.setParameter(ASSET_CLASS, assetClass);
            query.setParameter(FACTOR_TYPE, factorType);
            query.setParameter(CANCELED, "Y");
            query.setParameter(BATCH_COMPLETED, "Y");
            query.executeUpdate();
            String messageSucess = "Sucess cancelling batches for: " + flagDate + "/" + engine + "/" + assetClass + "/" + factorType;
            log.info(messageSucess);
            sendKafkaNotification(formatDate(sqlDate), engine.toLowerCase(), assetClass, factorType, null, null, null, null, null, null, "Y", null, null, null, null, null);
        } catch (Exception e) {
            String messageError = "Error updating ControlObsmodFlow: " + flagDate + "/" + engine + "/" + assetClass + "/" + factorType;
            log.error(messageError);
            log.error(e.getMessage());
        }
    }
  public void updateControlObsmodFlow(String dataDatePart, String flow, String assetClass, String factorType, String idFunctionalityMom, String momApply, String momApplyEnded, String proxyApply, String proxyApplyEnded, String idFunctionalityProxy) {
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(YYYY_MM_DD);
            LocalDate localDate = LocalDate.parse(dataDatePart, formatter);
            java.sql.Date sqlDate = java.sql.Date.valueOf(localDate);
            Timestamp timestampEnd = Timestamp.from(Instant.now());
            Query query = entityManager.createNativeQuery(updateQuery);
            query.setParameter(DATA_DATE_PART, sqlDate);
            query.setParameter(FLOW, flow);
            query.setParameter(ASSET_CLASS, assetClass);
            query.setParameter(FACTOR_TYPE, factorType);
            query.setParameter(ID_FUNCTIONALITY_MOM, idFunctionalityMom);
            query.setParameter(MOM_APPLY, momApply);
            query.setParameter(MOM_APPLY_ENDED, momApplyEnded);
            query.setParameter(PROXY_APPLY, proxyApply);
            query.setParameter(PROXY_APPLY_ENDED, proxyApplyEnded);
            query.setParameter(ID_FUNCTIONALITY_PROXY, idFunctionalityProxy);
            query.setParameter(BATCH_COMPLETED, 'N');
            query.setParameter(MOM_END_BATCH, timestampEnd);
            query.executeUpdate();
        } catch (Exception e) {
            log.error("Error updating ControlObsmodFlow: " + e.getMessage());
        }
    }    public void insertIntoControlObsmodFlow(String dataDatePart, String flow, String assetClass, String factorType, String idFunctionalityMom, String momApply, String momApplyEnded, String proxyApply, String proxyApplyEnded, String idFunctionalityProxy) {
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(YYYY_MM_DD);
            LocalDate localDate = LocalDate.parse(dataDatePart, formatter);
            java.sql.Date sqlDate = java.sql.Date.valueOf(localDate);
            Timestamp timestampInit = Timestamp.from(Instant.now());
            Query query = entityManager.createNativeQuery(insertQuery);
            query.setParameter(DATA_DATE_PART, sqlDate);
            query.setParameter(FLOW, flow);
            query.setParameter(ASSET_CLASS, assetClass);
            query.setParameter(FACTOR_TYPE, factorType);
            query.setParameter(ASSET_CLASS, assetClass);
            query.setParameter(FACTOR_TYPE, factorType);
            query.setParameter(ID_FUNCTIONALITY_MOM, idFunctionalityMom);
            query.setParameter(MOM_APPLY, momApply);
            query.setParameter(MOM_APPLY_ENDED, momApplyEnded);
            query.setParameter(PROXY_APPLY, proxyApply);
            query.setParameter(PROXY_APPLY_ENDED, proxyApplyEnded);
            query.setParameter(ID_FUNCTIONALITY_PROXY, idFunctionalityProxy);
            query.setParameter(CANCELED, 'N');
            query.setParameter(BATCH_COMPLETED, 'N');
            query.setParameter(MOM_START_BATCH, timestampInit);
            query.executeUpdate();
        } catch (Exception e) {
            log.error("Error inserting into ControlObsmodFlow: " + e.getMessage());
        }
    }
