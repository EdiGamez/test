@RunWith(MockitoJUnitRunner.class)
public class AdoUnderlyingServiceTest {

    @InjectMocks
    private AdoUnderlyingService service; // Cambia por el nombre real de tu clase

    @Mock
    private Logger log;

    @Mock
    private UtilMomSerializer utilMomSerializer;

    @Mock
    private RcsService rcs;

    private NewMsgGenericRequest request;

    @Before
    public void setUp() {
        request = new NewMsgGenericRequest();
        request.setAssetClass("IR");
        request.setFactorType("VOL");
        request.setOutputs(new ArrayList<>());
        request.setIdFunctionality("funcId");
        request.setUnit("unit");
        request.setInputs(Collections.emptyList());
        request.setOperation("GET");
        request.setSourceSystem("SYS");
        request.setResponseQueue("QUEUE");
    }

    @Test
    public void testProcessListAdosDatapoints() throws Exception {
        AdoUnderlyingService spyService = Mockito.spy(service);

        Mockito.doReturn(true).when(spyService).checkIfIsLookingListAdosDatapoints(request);
        List<GetUnderlyingWithAdoResponse> mockList = Arrays.asList(
                new GetUnderlyingWithAdoResponse("ADO1", "1M")
        );
        Mockito.doReturn(mockList).when(spyService).executeGetUnderlyingWithAdoPointProcedure(request);

        NewMsgGenericResponse response = spyService.getAdoUnderlying(request);

        assertEquals(0, response.getErrorFlag());
        assertEquals(1, response.getOutputs().size());
        assertEquals("ADO1", response.getOutputs().get(0).getAdo());
    }

    @Test
    public void testProcessAdoDatapoint() throws Exception {
        AdoUnderlyingService spyService = Mockito.spy(service);

        Mockito.doReturn(false).when(spyService).checkIfIsLookingListAdosDatapoints(request);
        Mockito.doReturn(true).when(spyService).checkIfIsLookingTheAdoOfDatapoint(request);
        Mockito.doReturn("ADO_DP").when(spyService).executeGetAdoDatapointFunction(request);

        NewMsgGenericResponse response = spyService.getAdoUnderlying(request);

        assertEquals(0, response.getErrorFlag());
        assertEquals(1, response.getOutputs().size());
        assertEquals("ADO_DP", response.getOutputs().get(0).getAdo());
    }

    @Test
    public void testProcessAdoUnderlying() throws Exception {
        request.setAssetClass("FX");
        request.setFactorType("VOL");

        AdoUnderlyingService spyService = Mockito.spy(service);

        Mockito.doReturn(false).when(spyService).checkIfIsLookingListAdosDatapoints(request);
        Mockito.doReturn(true).when(spyService).checkIfIsLookingTheAdoOfDatapoint(request);
        Mockito.doReturn("ADO_UNDERLYING").when(spyService).executeGetAdoUnderlyingFunction(request);

        NewMsgGenericResponse response = spyService.getAdoUnderlying(request);

        assertEquals(0, response.getErrorFlag());
        assertEquals(1, response.getOutputs().size());
        assertEquals("ADO_UNDERLYING", response.getOutputs().get(0).getAdo());
    }

    @Test
    public void testNoProcessMatches() throws Exception {
        AdoUnderlyingService spyService = Mockito.spy(service);

        Mockito.doReturn(false).when(spyService).checkIfIsLookingListAdosDatapoints(request);
        Mockito.doReturn(false).when(spyService).checkIfIsLookingTheAdoOfDatapoint(request);
        Mockito.doReturn(false).when(spyService).checkIfIsLookingAdoUnderlying(request);

        NewMsgGenericResponse response = spyService.getAdoUnderlying(request);

        assertEquals(1, response.getErrorFlag());
        assertEquals(RfrCommonCTES.Messages.INFO_NO_DATA_AVAILABLE, response.getErrorMessage());
        assertTrue(response.getOutputs().isEmpty());
    }

    @Test
    public void testExceptionHandling() throws Exception {
        AdoUnderlyingService spyService = Mockito.spy(service);

        Mockito.doThrow(new RuntimeException("Failure")).when(spyService).initStaticTables(any(), any());

        NewMsgGenericResponse response = spyService.getAdoUnderlying(request);

        assertEquals(1, response.getErrorFlag());
        assertEquals(RfrCommonCTES.Messages.INFO_NO_DATA_AVAILABLE, response.getErrorMessage());
    }
}
